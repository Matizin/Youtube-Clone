{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  currentVideo: null,\n  loading: false,\n  error: false\n};\nexport const videoSlice = createSlice({\n  name: \"video\",\n  initialState,\n  reducers: {\n    fetchStart: state => {\n      state.loading = true;\n    },\n    fetchSuccess: (state, action) => {\n      state.loading = false;\n      state.currentVideo = action.payload;\n    },\n    fetchFailure: state => {\n      state.loading = false;\n      state.error = true;\n    },\n    like: (state, action) => {\n      if (!state.currentVideo.likes.includes(action.payload)) {\n        state.currentVideo.likes.push(action.payload);\n        state.currentVideo.dislikes.splice(state.currentVideo.dislikes.findIndex(userId => userId === action.payload), 1);\n      }\n    },\n    dislike: (state, action) => {\n      if (!state.currentVideo.dislikes.includes(action.payload)) {\n        state.currentVideo.dislikes.push(action.payload);\n        state.currentVideo.likes.splice(state.currentVideo.likes.findIndex(userId => userId === action.payload), 1);\n      }\n    }\n  }\n});\nexport const {\n  fetchStart,\n  fetchSuccess,\n  fetchFailure,\n  like,\n  dislike\n} = videoSlice.actions;\nexport default videoSlice.reducer;","map":{"version":3,"sources":["C:/Users/Mateus/Desktop/Portfolio/Youtube Clone/client/src/redux/videoSlice.js"],"names":["createSlice","initialState","currentVideo","loading","error","videoSlice","name","reducers","fetchStart","state","fetchSuccess","action","payload","fetchFailure","like","likes","includes","push","dislikes","splice","findIndex","userId","dislike","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,YAAY,EAAE,IADK;AAEnBC,EAAAA,OAAO,EAAE,KAFU;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,OAAO,MAAMC,UAAU,GAAGL,WAAW,CAAC;AACpCM,EAAAA,IAAI,EAAE,OAD8B;AAEpCL,EAAAA,YAFoC;AAGpCM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAGC,KAAD,IAAW;AACrBA,MAAAA,KAAK,CAACN,OAAN,GAAgB,IAAhB;AACD,KAHO;AAIRO,IAAAA,YAAY,EAAE,CAACD,KAAD,EAAQE,MAAR,KAAmB;AAC/BF,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACAM,MAAAA,KAAK,CAACP,YAAN,GAAqBS,MAAM,CAACC,OAA5B;AACD,KAPO;AAQRC,IAAAA,YAAY,EAAGJ,KAAD,IAAW;AACvBA,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACAM,MAAAA,KAAK,CAACL,KAAN,GAAc,IAAd;AACD,KAXO;AAYRU,IAAAA,IAAI,EAAE,CAACL,KAAD,EAAQE,MAAR,KAAmB;AACvB,UAAI,CAACF,KAAK,CAACP,YAAN,CAAmBa,KAAnB,CAAyBC,QAAzB,CAAkCL,MAAM,CAACC,OAAzC,CAAL,EAAwD;AACtDH,QAAAA,KAAK,CAACP,YAAN,CAAmBa,KAAnB,CAAyBE,IAAzB,CAA8BN,MAAM,CAACC,OAArC;AACAH,QAAAA,KAAK,CAACP,YAAN,CAAmBgB,QAAnB,CAA4BC,MAA5B,CACEV,KAAK,CAACP,YAAN,CAAmBgB,QAAnB,CAA4BE,SAA5B,CACGC,MAAD,IAAYA,MAAM,KAAKV,MAAM,CAACC,OADhC,CADF,EAIE,CAJF;AAMD;AACF,KAtBO;AAuBRU,IAAAA,OAAO,EAAE,CAACb,KAAD,EAAQE,MAAR,KAAmB;AAC1B,UAAI,CAACF,KAAK,CAACP,YAAN,CAAmBgB,QAAnB,CAA4BF,QAA5B,CAAqCL,MAAM,CAACC,OAA5C,CAAL,EAA2D;AACzDH,QAAAA,KAAK,CAACP,YAAN,CAAmBgB,QAAnB,CAA4BD,IAA5B,CAAiCN,MAAM,CAACC,OAAxC;AACAH,QAAAA,KAAK,CAACP,YAAN,CAAmBa,KAAnB,CAAyBI,MAAzB,CACEV,KAAK,CAACP,YAAN,CAAmBa,KAAnB,CAAyBK,SAAzB,CACGC,MAAD,IAAYA,MAAM,KAAKV,MAAM,CAACC,OADhC,CADF,EAIE,CAJF;AAMD;AACF;AAjCO;AAH0B,CAAD,CAA9B;AAwCP,OAAO,MAAM;AAAEJ,EAAAA,UAAF;AAAcE,EAAAA,YAAd;AAA4BG,EAAAA,YAA5B;AAA0CC,EAAAA,IAA1C;AAAgDQ,EAAAA;AAAhD,IACXjB,UAAU,CAACkB,OADN;AAGP,eAAelB,UAAU,CAACmB,OAA1B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  currentVideo: null,\r\n  loading: false,\r\n  error: false,\r\n};\r\n\r\nexport const videoSlice = createSlice({\r\n  name: \"video\",\r\n  initialState,\r\n  reducers: {\r\n    fetchStart: (state) => {\r\n      state.loading = true;\r\n    },\r\n    fetchSuccess: (state, action) => {\r\n      state.loading = false;\r\n      state.currentVideo = action.payload;\r\n    },\r\n    fetchFailure: (state) => {\r\n      state.loading = false;\r\n      state.error = true;\r\n    },\r\n    like: (state, action) => {\r\n      if (!state.currentVideo.likes.includes(action.payload)) {\r\n        state.currentVideo.likes.push(action.payload);\r\n        state.currentVideo.dislikes.splice(\r\n          state.currentVideo.dislikes.findIndex(\r\n            (userId) => userId === action.payload\r\n          ),\r\n          1\r\n        );\r\n      }\r\n    },\r\n    dislike: (state, action) => {\r\n      if (!state.currentVideo.dislikes.includes(action.payload)) {\r\n        state.currentVideo.dislikes.push(action.payload);\r\n        state.currentVideo.likes.splice(\r\n          state.currentVideo.likes.findIndex(\r\n            (userId) => userId === action.payload\r\n          ),\r\n          1\r\n        );\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { fetchStart, fetchSuccess, fetchFailure, like, dislike } =\r\n  videoSlice.actions;\r\n\r\nexport default videoSlice.reducer;"]},"metadata":{},"sourceType":"module"}